# Nginx reverse proxy configuration for Traefik Multi-Project Setup
# Enables static IP 103.217.173.158 access to Docker containers
# Forwards requests to internal Docker network via localhost

# HTTP Configuration - Port 58002
server {
    listen 103.217.173.158:58002;
    server_name 103.217.173.158;
    
    # Logging
    access_log /var/log/nginx/traefik-proxy-access.log;
    error_log /var/log/nginx/traefik-proxy-error.log;
    
    # Security
    server_tokens off;
    
    # Main proxy configuration to forward all requests to Traefik
    location / {
        # Proxy to localhost where Docker Traefik is accessible
        proxy_pass http://localhost:58002;
        
        # Preserve original request information for Traefik routing
        proxy_set_header Host 103.217.173.158:58002;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host 103.217.173.158;
        proxy_set_header X-Forwarded-Port 58002;
        
        # WebSocket support for applications that need it
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings for better performance
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Handle redirects properly
        proxy_redirect off;
    }
    
    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "Nginx reverse proxy healthy\n";
        add_header Content-Type text/plain;
    }
}

# HTTPS Configuration - Port 58003
server {
    listen 103.217.173.158:58003 ssl http2;
    server_name 103.217.173.158;
    
    # SSL Configuration
    # Note: You'll need to provide SSL certificates
    # ssl_certificate /etc/nginx/ssl/cert.pem;
    # ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # For development/testing, you can use self-signed certificates
    # Generate with: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
    
    # Uncomment and configure SSL when certificates are available
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
    
    # Temporary redirect to HTTP for now (remove when SSL is configured)
    return 301 http://103.217.173.158:58002$request_uri;
    
    # Main proxy configuration (uncomment when SSL certificates are configured)
    # location / {
    #     # Proxy to localhost where Docker Traefik HTTPS is accessible
    #     proxy_pass http://localhost:58003;
    #     
    #     # Preserve original request information for Traefik routing
    #     proxy_set_header Host 103.217.173.158:58003;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto https;
    #     proxy_set_header X-Forwarded-Host 103.217.173.158;
    #     proxy_set_header X-Forwarded-Port 58003;
    #     
    #     # WebSocket support
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     
    #     # Timeout settings
    #     proxy_connect_timeout 60s;
    #     proxy_send_timeout 60s;
    #     proxy_read_timeout 60s;
    #     
    #     # Buffer settings
    #     proxy_buffering on;
    #     proxy_buffer_size 4k;
    #     proxy_buffers 8 4k;
    #     proxy_busy_buffers_size 8k;
    #     
    #     # Handle redirects properly
    #     proxy_redirect off;
    # }
}

# Optional: Default server block to handle other requests
# server {
#     listen 80 default_server;
#     listen [::]:80 default_server;
#     server_name _;
#     
#     # Redirect to the specific static IP
#     return 301 http://103.217.173.158:58002$request_uri;
# }